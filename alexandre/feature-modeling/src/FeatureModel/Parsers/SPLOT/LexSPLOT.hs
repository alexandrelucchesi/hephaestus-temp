{-# LANGUAGE CPP,MagicHash,BangPatterns #-}
{-# LINE 3 "LexSPLOT.x" #-}

{-# OPTIONS -fno-warn-incomplete-patterns #-}
module FeatureModel.Parsers.SPLOT.LexSPLOT where



import qualified Data.Bits
import Data.Word (Word8)

#if __GLASGOW_HASKELL__ >= 603
#include "ghcconfig.h"
#elif defined(__GLASGOW_HASKELL__)
#include "config.h"
#endif
#if __GLASGOW_HASKELL__ >= 503
import Data.Array
import Data.Char (ord)
import Data.Array.Base (unsafeAt)
#else
import Array
import Char (ord)
#endif
#if __GLASGOW_HASKELL__ >= 503
import GHC.Exts
#else
import GlaExts
#endif
alex_base :: AlexAddr
alex_base = AlexA# "\xf8\xff\xff\xff\xc9\xff\xff\xff\xc8\xff\xff\xff\xa3\xff\xff\xff\xa4\xff\xff\xff\xa5\xff\xff\xff\x98\xff\xff\xff\xa7\xff\xff\xff\x9e\xff\xff\xff\xa1\xff\xff\xff\xa6\xff\xff\xff\xab\xff\xff\xff\xb0\xff\xff\xff\xd5\xff\xff\xff\xa0\xff\xff\xff\xa8\xff\xff\xff\x9f\xff\xff\xff\xa9\xff\xff\xff\xac\xff\xff\xff\xb5\xff\xff\xff\xaa\xff\xff\xff\xb3\xff\xff\xff\xae\xff\xff\xff\xb7\xff\xff\xff\xb4\xff\xff\xff\xad\xff\xff\xff\xbb\xff\xff\xff\xb9\xff\xff\xff\xbc\xff\xff\xff\xc6\xff\xff\xff\xc5\xff\xff\xff\xd2\xff\xff\xff\xd4\xff\xff\xff\xc1\xff\xff\xff\xbe\xff\xff\xff\xd7\xff\xff\xff\x16\x00\x00\x00\xef\xff\xff\xff\xf0\xff\xff\xff\xf1\xff\xff\xff\xf3\xff\xff\xff\x0e\x00\x00\x00\x11\x00\x00\x00\x04\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x07\x00\x00\x00\x15\x00\x00\x00\x17\x00\x00\x00\x02\x00\x00\x00\x4d\x00\x00\x00\x08\x00\x00\x00\x09\x00\x00\x00\x18\x00\x00\x00\x1a\x00\x00\x00\x19\x00\x00\x00\x1b\x00\x00\x00\x1d\x00\x00\x00\x0a\x00\x00\x00\x1c\x00\x00\x00\x23\x00\x00\x00\x1e\x00\x00\x00\x21\x00\x00\x00\x24\x00\x00\x00\x22\x00\x00\x00\x25\x00\x00\x00\x28\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x00\x00\x1f\x00\x00\x00\x2c\x00\x00\x00\x66\x00\x00\x00\x33\x00\x00\x00\x26\x00\x00\x00\x35\x00\x00\x00\x32\x00\x00\x00\x34\x00\x00\x00\x37\x00\x00\x00\x2f\x00\x00\x00\x38\x00\x00\x00\x30\x00\x00\x00\x31\x00\x00\x00\x39\x00\x00\x00\x3a\x00\x00\x00\x3f\x00\x00\x00\x3b\x00\x00\x00\x29\x00\x00\x00\x36\x00\x00\x00\x3c\x00\x00\x00\x40\x00\x00\x00\x44\x00\x00\x00\x41\x00\x00\x00\x3d\x00\x00\x00\x46\x00\x00\x00\x43\x00\x00\x00\x48\x00\x00\x00\x47\x00\x00\x00\x45\x00\x00\x00\x3e\x00\x00\x00\x4c\x00\x00\x00\x49\x00\x00\x00\x42\x00\x00\x00\x4a\x00\x00\x00\x53\x00\x00\x00\x4b\x00\x00\x00\x50\x00\x00\x00\x5c\x00\x00\x00\x8f\x00\x00\x00\x5a\x00\x00\x00\x95\x00\x00\x00\x5b\x00\x00\x00\x5d\x00\x00\x00\x70\x00\x00\x00\x62\x00\x00\x00\x8b\x00\x00\x00\x63\x00\x00\x00\x5e\x00\x00\x00\x5f\x00\x00\x00\x60\x00\x00\x00\x69\x00\x00\x00\x61\x00\x00\x00\x56\x00\x00\x00\x6c\x00\x00\x00\x71\x00\x00\x00\x6e\x00\x00\x00\x6f\x00\x00\x00\xa2\x00\x00\x00\x64\x00\x00\x00\x73\x00\x00\x00\xa4\x00\x00\x00\x6d\x00\x00\x00\x9c\x00\x00\x00\x79\x00\x00\x00\x72\x00\x00\x00\x74\x00\x00\x00\x76\x00\x00\x00\x6b\x00\x00\x00\xad\x00\x00\x00\x7a\x00\x00\x00\x75\x00\x00\x00\x77\x00\x00\x00\x78\x00\x00\x00\x7d\x00\x00\x00\x7e\x00\x00\x00\x81\x00\x00\x00\x7b\x00\x00\x00\xb6\x00\x00\x00\x82\x00\x00\x00\x7c\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\xb9\x00\x00\x00\xbb\x00\x00\x00\xae\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x8e\x00\x00\x00\x89\x00\x00\x00\x85\x00\x00\x00\x90\x00\x00\x00\x88\x00\x00\x00\x93\x00\x00\x00\x8d\x00\x00\x00\xa6\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x9b\x00\x00\x00\x8a\x00\x00\x00\x99\x00\x00\x00\x92\x00\x00\x00\x9f\x00\x00\x00\x94\x00\x00\x00\x98\x00\x00\x00\x91\x00\x00\x00\x9d\x00\x00\x00\xa3\x00\x00\x00\xa7\x00\x00\x00\x9a\x00\x00\x00\x9e\x00\x00\x00\xd8\x00\x00\x00\xa8\x00\x00\x00\xa1\x00\x00\x00\xa5\x00\x00\x00\xa9\x00\x00\x00\xb8\x00\x00\x00\xc2\x00\x00\x00\xe1\x00\x00\x00\xe0\x00\x00\x00\xe3\x00\x00\x00\xac\x00\x00\x00\xaa\x00\x00\x00\xe2\x00\x00\x00\xa0\x00\x00\x00\xab\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xe5\x00\x00\x00\xe7\x00\x00\x00\xdb\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb5\x00\x00\x00\xb3\x00\x00\x00\xb7\x00\x00\x00\xb4\x00\x00\x00\xbc\x00\x00\x00\xba\x00\x00\x00\xbe\x00\x00\x00\xfb\x00\x00\x00\xbd\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xea\x00\x00\x00\xc1\x00\x00\x00\xfd\x00\x00\x00\xc4\x00\x00\x00\xc3\x00\x00\x00\xc6\x00\x00\x00\xc8\x00\x00\x00\xf3\x00\x00\x00\xef\x00\x00\x00\x01\x01\x00\x00\xc9\x00\x00\x00\xfe\x00\x00\x00\xf1\x00\x00\x00\x02\x01\x00\x00\xd9\x00\x00\x00\xe8\x00\x00\x00\xcb\x00\x00\x00\xce\x00\x00\x00\xca\x00\x00\x00\xcf\x00\x00\x00\x14\x01\x00\x00\x1f\x01\x00\x00\xcc\x00\x00\x00\x06\x01\x00\x00\xd3\x00\x00\x00\xf4\x00\x00\x00\xd5\x00\x00\x00\xde\x00\x00\x00\xf7\x00\x00\x00\xd4\x00\x00\x00\xdc\x00\x00\x00\x25\x01\x00\x00\xe4\x00\x00\x00\xd7\x00\x00\x00\xda\x00\x00\x00\xdd\x00\x00\x00\x0f\x01\x00\x00\x21\x01\x00\x00\xdf\x00\x00\x00\xec\x00\x00\x00\xe6\x00\x00\x00\xe9\x00\x00\x00\xeb\x00\x00\x00\xed\x00\x00\x00\x23\x01\x00\x00\xee\x00\x00\x00\xf0\x00\x00\x00\x32\x01\x00\x00\xf2\x00\x00\x00\xf5\x00\x00\x00\xf6\x00\x00\x00\xf9\x00\x00\x00\xf8\x00\x00\x00\xfc\x00\x00\x00\xfa\x00\x00\x00\x34\x01\x00\x00\xff\x00\x00\x00\x26\x01\x00\x00\x29\x01\x00\x00\x3b\x01\x00\x00\x03\x01\x00\x00\x3f\x01\x00\x00\x00\x01\x00\x00\x04\x01\x00\x00\x05\x01\x00\x00\x08\x01\x00\x00\x07\x01\x00\x00\x09\x01\x00\x00\x3e\x01\x00\x00\x0a\x01\x00\x00\x0d\x01\x00\x00\x0e\x01\x00\x00\x1b\x01\x00\x00\x0c\x01\x00\x00\x10\x01\x00\x00\x2c\x01\x00\x00\x11\x01\x00\x00\x12\x01\x00\x00\x45\x01\x00\x00\x0b\x01\x00\x00\x13\x01\x00\x00\x4f\x01\x00\x00\x15\x01\x00\x00\x16\x01\x00\x00\x20\x01\x00\x00\x17\x01\x00\x00\x18\x01\x00\x00\x1a\x01\x00\x00\x1c\x01\x00\x00\x1d\x01\x00\x00\x19\x01\x00\x00\x24\x01\x00\x00\x22\x01\x00\x00\x2a\x01\x00\x00\x1e\x01\x00\x00\x27\x01\x00\x00\x28\x01\x00\x00\x2b\x01\x00\x00\x2d\x01\x00\x00\x2e\x01\x00\x00\x31\x01\x00\x00\x35\x01\x00\x00\x2f\x01\x00\x00\x33\x01\x00\x00\x30\x01\x00\x00\x36\x01\x00\x00\x37\x01\x00\x00\x38\x01\x00\x00\x39\x01\x00\x00\x3c\x01\x00\x00\x3a\x01\x00\x00\x3d\x01\x00\x00\x53\x01\x00\x00\x40\x01\x00\x00\x41\x01\x00\x00\x42\x01\x00\x00\x43\x01\x00\x00\x46\x01\x00\x00\x44\x01\x00\x00\x47\x01\x00\x00\x54\x01\x00\x00\x49\x01\x00\x00\x4b\x01\x00\x00\x4c\x01\x00\x00\x4d\x01\x00\x00\x5f\x01\x00\x00\x48\x01\x00\x00\x4a\x01\x00\x00\x50\x01\x00\x00\x51\x01\x00\x00\x57\x01\x00\x00\x52\x01\x00\x00\x4e\x01\x00\x00\x55\x01\x00\x00\x56\x01\x00\x00\x59\x01\x00\x00\x5a\x01\x00\x00\x5b\x01\x00\x00\x69\x01\x00\x00\x60\x01\x00\x00\x61\x01\x00\x00\x58\x01\x00\x00\x6f\x01\x00\x00\x5c\x01\x00\x00\x5d\x01\x00\x00\x5e\x01\x00\x00\x62\x01\x00\x00\x63\x01\x00\x00\x65\x01\x00\x00\x64\x01\x00\x00\x66\x01\x00\x00\x68\x01\x00\x00\x6a\x01\x00\x00\x67\x01\x00\x00\x6b\x01\x00\x00\x6c\x01\x00\x00\x7a\x01\x00\x00\x6d\x01\x00\x00\x7c\x01\x00\x00\x6e\x01\x00\x00\x71\x01\x00\x00\x72\x01\x00\x00\x75\x01\x00\x00\x7e\x01\x00\x00\x70\x01\x00\x00\x07\x02\x00\x00\xa7\x01\x00\x00\x7d\x01\x00\x00\x7f\x01\x00\x00\x27\x02\x00\x00\x00\x00\x00\x00\x18\x02\x00\x00\x63\x02\x00\x00"#

alex_table :: AlexAddr
alex_table = AlexA# "\x00\x00\x7e\x01\x7e\x01\x7e\x01\x7e\x01\x7e\x01\x7d\x01\x7c\x01\x7b\x01\x7c\x01\x01\x00\x01\x00\x77\x01\x76\x01\x05\x00\x75\x01\x06\x00\x74\x01\x73\x01\x72\x01\x70\x01\x08\x00\x09\x00\x71\x01\x7e\x01\x29\x00\x7a\x01\x0c\x00\x0d\x00\x68\x01\x6f\x01\x6e\x01\x0a\x00\x13\x00\x6c\x01\x6d\x01\x6b\x01\x30\x00\x17\x00\x67\x01\x81\x01\x81\x01\x81\x01\x81\x01\x81\x01\x81\x01\x81\x01\x81\x01\x81\x01\x81\x01\x18\x00\x66\x01\x33\x00\x64\x01\x1a\x00\x63\x01\x1b\x00\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x61\x01\x1c\x00\x1d\x00\x5f\x01\x7f\x01\x60\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x20\x00\x5e\x01\x21\x00\x5b\x01\x5d\x01\x24\x00\x5c\x01\x2b\x00\x58\x01\x57\x01\x56\x01\x55\x01\x53\x01\x5a\x01\x2f\x00\x4f\x01\x4e\x01\x4c\x01\x4a\x01\x48\x01\x49\x01\x51\x01\x47\x01\x50\x01\x46\x01\x00\x01\x4b\x01\x38\x00\x4d\x01\x3c\x00\x34\x01\x45\x01\x3f\x00\x44\x01\x3e\x00\x42\x01\x42\x00\x41\x01\x43\x00\x40\x01\x43\x01\x46\x00\x48\x00\x3f\x01\x4a\x00\x3d\x01\x2d\x01\x3a\x01\x3e\x01\x3b\x01\x36\x01\x33\x01\x31\x01\x30\x01\x2f\x01\x5d\x00\x54\x00\x2e\x01\x2c\x01\x58\x00\x6f\x00\x5e\x00\x39\x01\x27\x01\x4c\x00\x22\x01\x37\x01\x21\x01\x2a\x01\x64\x00\x28\x01\x66\x00\x79\x01\x2b\x01\x25\x01\x24\x01\x62\x00\x61\x00\x6c\x00\x20\x01\x29\x01\x1f\x01\x1c\x01\x1e\x01\x1a\x01\x19\x01\x17\x01\x73\x00\x15\x01\x75\x00\x18\x01\x76\x00\x79\x00\x16\x01\x11\x01\x14\x01\x13\x01\x7c\x00\x0e\x01\x0d\x01\x7f\x00\x80\x00\x0c\x01\x0b\x01\x09\x01\x08\x01\x86\x00\x87\x00\x07\x01\x03\x01\x0a\x01\x01\x01\x92\x00\x8a\x00\x02\x01\xfd\x00\xfe\x00\x97\x00\x93\x00\x98\x00\xf4\x00\x9d\x00\x9b\x00\x91\x00\xf2\x00\xf0\x00\xf1\x00\xf3\x00\xfa\x00\x9e\x00\xa0\x00\x95\x00\x96\x00\xa1\x00\xa3\x00\xa5\x00\xa4\x00\xa6\x00\xef\x00\xa8\x00\xa9\x00\xaa\x00\xec\x00\xe9\x00\xee\x00\xad\x00\xb3\x00\xaf\x00\xe6\x00\xe8\x00\xb4\x00\xb6\x00\xb8\x00\xe5\x00\xe7\x00\xb5\x00\xe4\x00\xe3\x00\xbb\x00\xe0\x00\xbd\x00\xc4\x00\xde\x00\xc5\x00\xc0\x00\xd7\x00\xdf\x00\xc7\x00\xd2\x00\xd0\x00\xc1\x00\xcc\x00\xd8\x00\xd3\x00\xe2\x00\xdd\x00\xcf\x00\xd6\x00\xc8\x00\xc2\x00\xc3\x00\xd5\x00\xcd\x00\xd1\x00\xd4\x00\xd9\x00\xc6\x00\xca\x00\xbf\x00\xe1\x00\xba\x00\xbc\x00\xb7\x00\xb9\x00\xcb\x00\xea\x00\xda\x00\xdc\x00\xc9\x00\xdb\x00\xbe\x00\xb2\x00\xb0\x00\xb1\x00\xeb\x00\xed\x00\xac\x00\xab\x00\x9f\x00\xae\x00\xa7\x00\xa2\x00\xf5\x00\x9c\x00\x99\x00\x9a\x00\xf7\x00\xf6\x00\xf9\x00\xf8\x00\xfb\x00\x94\x00\x8d\x00\x06\x01\xfc\x00\x0f\x01\xff\x00\x82\x00\x8f\x00\x8c\x00\x10\x01\x04\x01\x88\x00\x90\x00\x12\x01\x05\x01\x7d\x00\x71\x00\x6e\x00\x1d\x01\x81\x00\x23\x01\x8e\x00\x85\x00\x26\x01\x89\x00\x7e\x00\x84\x00\x8b\x00\x77\x00\x72\x00\x7b\x00\x65\x00\x83\x00\x68\x00\x5f\x00\x37\x00\x54\x01\x74\x00\x1b\x01\x78\x00\x7a\x00\x70\x00\x6d\x00\x4d\x00\x53\x00\x6a\x00\x6b\x00\x59\x01\x65\x01\x00\x00\x3a\x01\x69\x01\x69\x00\x67\x00\x6a\x01\x5c\x00\x59\x00\x65\x01\x60\x00\x57\x00\x5b\x00\x63\x00\x5a\x00\x16\x00\x55\x00\x32\x01\x4f\x00\x52\x00\x38\x01\x4e\x00\xce\x00\x49\x00\x26\x00\x3c\x01\x51\x00\x2e\x00\x02\x00\x4b\x00\x78\x01\x50\x00\x7c\x01\x7f\x01\x00\x00\x44\x00\x47\x00\x00\x00\x00\x00\x3d\x00\x45\x00\x39\x00\x3a\x00\x00\x00\x40\x00\x00\x00\x3b\x00\x58\x01\x29\x00\x2c\x00\x52\x01\x31\x00\x36\x00\x35\x00\x34\x00\x4e\x01\x32\x00\x56\x00\x2d\x00\x7f\x01\x23\x00\x25\x00\x35\x01\x00\x00\x2a\x00\x00\x00\x28\x00\x27\x00\x60\x01\x1f\x00\x62\x01\x19\x00\x00\x00\x22\x00\x41\x00\x13\x00\x0b\x00\x00\x00\x07\x00\x00\x00\x14\x00\x78\x01\x12\x00\x0f\x00\x1e\x00\x00\x00\x11\x00\x10\x00\x0b\x00\x05\x00\x00\x00\x00\x00\x0e\x00\x04\x00\x03\x00\x01\x00\x7c\x01\x7c\x01\x00\x00\x00\x00\x00\x00\x7f\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x00\x00\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x15\x00\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x7e\x01\x7e\x01\x7e\x01\x7e\x01\x7e\x01\x00\x00\x7c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\x01\x00\x00\x7e\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x00\x00\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x81\x01\x81\x01\x81\x01\x81\x01\x81\x01\x81\x01\x81\x01\x81\x01\x81\x01\x81\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x79\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"#

alex_check :: AlexAddr
alex_check = AlexA# "\xff\xff\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x3d\x00\x3f\x00\x65\x00\x65\x00\x65\x00\x73\x00\x65\x00\x6f\x00\x6d\x00\x69\x00\x65\x00\x61\x00\x3d\x00\x73\x00\x75\x00\x69\x00\x61\x00\x6f\x00\x20\x00\x66\x00\x22\x00\x6d\x00\x65\x00\x61\x00\x75\x00\x75\x00\x6d\x00\x6e\x00\x75\x00\x6f\x00\x69\x00\x72\x00\x6d\x00\x61\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x6d\x00\x61\x00\x3c\x00\x61\x00\x75\x00\x79\x00\x61\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x49\x00\x4a\x00\x4b\x00\x4c\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x51\x00\x52\x00\x53\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x5a\x00\x3d\x00\x65\x00\x65\x00\x65\x00\x5f\x00\x65\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x66\x00\x67\x00\x68\x00\x69\x00\x6a\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x72\x00\x73\x00\x74\x00\x75\x00\x76\x00\x77\x00\x78\x00\x79\x00\x7a\x00\x65\x00\x63\x00\x71\x00\x6f\x00\x65\x00\x65\x00\x65\x00\x65\x00\x79\x00\x2f\x00\x75\x00\x75\x00\x65\x00\x69\x00\x69\x00\x65\x00\x79\x00\x61\x00\x61\x00\x61\x00\x65\x00\x6f\x00\x61\x00\x6f\x00\x61\x00\x3f\x00\x6f\x00\x6d\x00\x73\x00\x65\x00\x6f\x00\x73\x00\x2d\x00\x61\x00\x69\x00\x61\x00\x65\x00\x69\x00\x65\x00\x69\x00\x75\x00\x65\x00\x65\x00\x65\x00\x6f\x00\x61\x00\x63\x00\x79\x00\x69\x00\x69\x00\x61\x00\x65\x00\x61\x00\x65\x00\x61\x00\x65\x00\x75\x00\x65\x00\x61\x00\x71\x00\x62\x00\x63\x00\x75\x00\x65\x00\x66\x00\x67\x00\x75\x00\x6f\x00\x75\x00\x65\x00\x69\x00\x6f\x00\xc3\x00\x73\x00\x61\x00\x2f\x00\x72\x00\x73\x00\x67\x00\x2d\x00\x79\x00\x69\x00\x55\x00\x69\x00\x65\x00\x3d\x00\x69\x00\x67\x00\x75\x00\x6d\x00\x6f\x00\x65\x00\x63\x00\x6f\x00\x2f\x00\x61\x00\x65\x00\x65\x00\x31\x00\x69\x00\x73\x00\x65\x00\x3d\x00\x61\x00\x65\x00\x2f\x00\x69\x00\x73\x00\x65\x00\x69\x00\x6f\x00\x65\x00\x2d\x00\x6f\x00\x6d\x00\x65\x00\x69\x00\x2f\x00\x67\x00\x2f\x00\x3d\x00\x63\x00\x69\x00\x73\x00\x61\x00\x63\x00\x61\x00\x6f\x00\x77\x00\x6f\x00\x6d\x00\x77\x00\x77\x00\x65\x00\x53\x00\x63\x00\x65\x00\x61\x00\x73\x00\x65\x00\x6d\x00\x61\x00\x69\x00\x65\x00\x6f\x00\x73\x00\x2d\x00\x63\x00\x69\x00\x61\x00\x61\x00\x65\x00\x53\x00\x63\x00\x73\x00\x6d\x00\x4d\x00\x2f\x00\x31\x00\x2f\x00\x67\x00\x2f\x00\x33\x00\x2f\x00\x77\x00\x3d\x00\x6f\x00\x69\x00\x20\x00\x65\x00\x2e\x00\x64\x00\x22\x00\x6d\x00\x30\x00\x77\x00\x6f\x00\x3a\x00\x73\x00\x77\x00\x77\x00\x73\x00\x6d\x00\x6c\x00\x6c\x00\x68\x00\x3a\x00\x6e\x00\x2e\x00\x32\x00\x58\x00\x30\x00\x68\x00\x4c\x00\x78\x00\x22\x00\x74\x00\x70\x00\x78\x00\x74\x00\x72\x00\x6e\x00\x6e\x00\x74\x00\x20\x00\x3a\x00\x6e\x00\x4e\x00\x4c\x00\x78\x00\x70\x00\x68\x00\x22\x00\x74\x00\x3a\x00\x6e\x00\x74\x00\x68\x00\x70\x00\x74\x00\x2e\x00\x64\x00\x2e\x00\x20\x00\x74\x00\x2e\x00\x6c\x00\x22\x00\x6c\x00\x66\x00\x30\x00\x6c\x00\x62\x00\x76\x00\x22\x00\x6e\x00\x20\x00\x22\x00\x46\x00\x54\x00\x64\x00\x38\x00\x78\x00\x6e\x00\x22\x00\x72\x00\x66\x00\x6e\x00\x76\x00\x64\x00\x64\x00\x6e\x00\x20\x00\x76\x00\x66\x00\x52\x00\x20\x00\x20\x00\x6e\x00\x6c\x00\x72\x00\x74\x00\x6c\x00\x6e\x00\x46\x00\x52\x00\x6c\x00\x6e\x00\x20\x00\x20\x00\xff\xff\x64\x00\x22\x00\x72\x00\x72\x00\x2e\x00\x70\x00\x6c\x00\x20\x00\x74\x00\x72\x00\x74\x00\x78\x00\x74\x00\x20\x00\x6c\x00\x74\x00\x64\x00\x6c\x00\x72\x00\x64\x00\x2d\x00\x64\x00\x46\x00\x6e\x00\x72\x00\x52\x00\x22\x00\x6e\x00\x22\x00\x72\x00\x22\x00\x22\x00\xff\xff\x6c\x00\x74\x00\xff\xff\xff\xff\x6e\x00\x72\x00\x6c\x00\x70\x00\xff\xff\x74\x00\xff\xff\x72\x00\x64\x00\x66\x00\x64\x00\x6e\x00\x6c\x00\x74\x00\x74\x00\x74\x00\x74\x00\x72\x00\x62\x00\x6e\x00\x3e\x00\x6e\x00\x66\x00\x67\x00\xff\xff\x78\x00\xff\xff\x72\x00\x72\x00\x6e\x00\x6c\x00\x6c\x00\x6c\x00\xff\xff\x74\x00\x73\x00\x6e\x00\x64\x00\xff\xff\x64\x00\xff\xff\x74\x00\x64\x00\x74\x00\x6e\x00\x2d\x00\xff\xff\x74\x00\x74\x00\x72\x00\x72\x00\xff\xff\xff\xff\x78\x00\x72\x00\x72\x00\x6e\x00\x6e\x00\x6c\x00\xff\xff\xff\xff\xff\xff\x3e\x00\x78\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x80\x00\x81\x00\x82\x00\x83\x00\x84\x00\x85\x00\x86\x00\x87\x00\x88\x00\x89\x00\x8a\x00\x8b\x00\x8c\x00\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x96\x00\xff\xff\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x9d\x00\x9e\x00\x9f\x00\xa0\x00\xa1\x00\xa2\x00\xa3\x00\xa4\x00\xa5\x00\xa6\x00\xa7\x00\xa8\x00\xa9\x00\xaa\x00\xab\x00\xac\x00\xad\x00\xae\x00\xaf\x00\xb0\x00\xb1\x00\xb2\x00\xb3\x00\xb4\x00\xb5\x00\xb6\x00\x20\x00\xb8\x00\xb9\x00\xba\x00\xbb\x00\xbc\x00\xbd\x00\xbe\x00\xbf\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\x2f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x27\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3e\x00\xff\xff\x20\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x49\x00\x4a\x00\x4b\x00\x4c\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x51\x00\x52\x00\x53\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x5a\x00\xff\xff\xff\xff\xff\xff\xff\xff\x5f\x00\xff\xff\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x66\x00\x67\x00\x68\x00\x69\x00\x6a\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x72\x00\x73\x00\x74\x00\x75\x00\x76\x00\x77\x00\x78\x00\x79\x00\x7a\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc3\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"#

alex_deflt :: AlexAddr
alex_deflt = AlexA# "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"#

alex_accept = listArray (0::IntlexAccSkip)],[(AlexAcc (alex_action_1))],[(AlexAcc (alex_action_2))],[(AlexAcc (alex_action_3))]]
{-# LINE 35 "LexSPLOT.x" #-}


tok f p s = f p s

share :: String -> String
share = id

data Tok =
   TS !String !Int    -- reserved words and symbols
 | TL !String         -- string literals
 | TI !String         -- integer literals
 | TV !String         -- identifiers
 | TD !String         -- double precision float literals
 | TC !String         -- character literals

 deriving (Eq,Show,Ord)

data Token = 
   PT  Posn Tok
 | Err Posn
  deriving (Eq,Show,Ord)

tokenPos (PT (Pn _ l _) _ :_) = "line " ++ show l
tokenPos (Err (Pn _ l _) :_) = "line " ++ show l
tokenPos _ = "end of file"

posLineCol (Pn _ l c) = (l,c)
mkPosToken t@(PT p _) = (posLineCol p, prToken t)

prToken t = case t of
  PT _ (TS s _) -> s
  PT _ (TL s)   -> s
  PT _ (TI s)   -> s
  PT _ (TV s)   -> s
  PT _ (TD s)   -> s
  PT _ (TC s)   -> s


data BTree = N | B String Tok BTree BTree deriving (Show)

eitherResIdent :: (String -> Tok) -> String -> Tok
eitherResIdent tv s = treeFind resWords
  where
  treeFind N = tv s
  treeFind (B a t left right) | s < a  = treeFind left
                              | s > a  = treeFind right
                              | s == a = t

resWords = b "</solitaryFeature>" 12 (b "\">" 6 (b "\" name=\"" 3 (b "\" min=\"" 2 (b "\" feature=\"" 1 N N) N) (b "\"/>" 5 (b "\" requires=\"" 4 N N) N)) (b "</feature>" 9 (b "</feature-model>" 8 (b "</binaryRelation>" 7 N N) N) (b "</setRelation>" 11 (b "</groupedFeature>" 10 N N) N))) (b "<feature-model xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"http://www.tdg-seville.info/benavides/featuremodelling/feature-model.xsd\">" 18 (b "<cardinality max=\"" 15 (b "<binaryRelation name=\"\">" 14 (b "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>" 13 N N) N) (b "<feature name=\"" 17 (b "<excludes excludes=\"" 16 N N) N)) (b "<setRelation name=\"" 21 (b "<requires feature=\"" 20 (b "<groupedFeature name=\"" 19 N N) N) (b "_" 23 (b "<solitaryFeature name=\"" 22 N N) N)))
   where b s n = let bs = id s
                  in B bs (TS bs n)

unescapeInitTail :: String -> String
unescapeInitTail = id . unesc . tail . id where
  unesc s = case s of
    '\\':c:cs | elem c ['\"', '\\', '\''] -> c : unesc cs
    '\\':'n':cs  -> '\n' : unesc cs
    '\\':'t':cs  -> '\t' : unesc cs
    '"':[]    -> []
    c:cs      -> c : unesc cs
    _         -> []

-------------------------------------------------------------------
-- Alex wrapper code.
-- A modified "posn" wrapper.
-------------------------------------------------------------------

data Posn = Pn !Int !Int !Int
      deriving (Eq, Show,Ord)

alexStartPos :: Posn
alexStartPos = Pn 0 1 1

alexMove :: Posn -> Char -> Posn
alexMove (Pn a l c) '\t' = Pn (a+1)  l     (((c+7) `div` 8)*8+1)
alexMove (Pn a l c) '\n' = Pn (a+1) (l+1)   1
alexMove (Pn a l c) _    = Pn (a+1)  l     (c+1)

type Byte = Word8

type AlexInput = (Posn,     -- current position,
                  Char,     -- previous char
                  [Byte],   -- pending bytes on the current char
                  String)   -- current input string

tokens :: String -> [Token]
tokens str = go (alexStartPos, '\n', [], str)
    where
      go :: AlexInput -> [Token]
      go inp@(pos, _, _, str) =
               case alexScan inp 0 of
                AlexEOF                   -> []
                AlexError (pos, _, _, _)  -> [Err pos]
                AlexSkip  inp' len        -> go inp'
                AlexToken inp' len act    -> act pos (take len str) : (go inp')

alexGetByte :: AlexInput -> Maybe (Byte,AlexInput)
alexGetByte (p, c, (b:bs), s) = Just (b, (p, c, bs, s))
alexGetByte (p, _, [], s) =
  case  s of
    []  -> Nothing
    (c:s) ->
             let p'     = alexMove p c
                 (b:bs) = utf8Encode c
              in p' `seq` Just (b, (p', c, bs, s))

alexInputPrevChar :: AlexInput -> Char
alexInputPrevChar (p, c, bs, s) = c

  -- | Encode a Haskell String to a list of Word8 values, in UTF8 format.
utf8Encode :: Char -> [Word8]
utf8Encode = map fromIntegral . go . ord
 where
  go oc
   | oc <= 0x7f       = [oc]

   | oc <= 0x7ff      = [ 0xc0 + (oc `Data.Bits.shiftR` 6)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]

   | oc <= 0xffff     = [ 0xe0 + (oc `Data.Bits.shiftR` 12)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
   | otherwise        = [ 0xf0 + (oc `Data.Bits.shiftR` 18)
                        , 0x80 + ((oc `Data.Bits.shiftR` 12) Data.Bits..&. 0x3f)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]

alex_action_1 =  tok (\p s -> PT p (eitherResIdent (TV . share) s)) 
alex_action_2 =  tok (\p s -> PT p (eitherResIdent (TV . share) s)) 
alex_action_3 =  tok (\p s -> PT p (TI $ share s))    
{-# LINE 1 "templates/GenericTemplate.hs" #-}
{-# LINE 1 "templates/GenericTemplate.hs" #-}
{-# LINE 1 "<built-in>" #-}
{-# LINE 1 "<command-line>" #-}
{-# LINE 1 "templates/GenericTemplate.hs" #-}
-- -----------------------------------------------------------------------------
-- ALEX TEMPLATE
--
-- This code is in the PUBLIC DOMAIN; you may copy it freely and use
-- it for any purpose whatsoever.

-- -----------------------------------------------------------------------------
-- INTERNALS and main scanner engine

{-# LINE 37 "templates/GenericTemplate.hs" #-}

{-# LINE 47 "templates/GenericTemplate.hs" #-}


data AlexAddr = AlexA# Addr#

#if __GLASGOW_HASKELL__ < 503
uncheckedShiftL# = shiftL#
#endif

{-# INLINE alexIndexInt16OffAddr #-}
alexIndexInt16OffAddr (AlexA# arr) off =
#ifdef WORDS_BIGENDIAN
  narrow16Int# i
  where
        !i    = word2Int# ((high `uncheckedShiftL#` 8#) `or#` low)
        !high = int2Word# (ord# (indexCharOffAddr# arr (off' +# 1#)))
        !low  = int2Word# (ord# (indexCharOffAddr# arr off'))
        !off' = off *# 2#
#else
  indexInt16OffAddr# arr off
#endif





{-# INLINE alexIndexInt32OffAddr #-}
alexIndexInt32OffAddr (AlexA# arr) off = 
#ifdef WORDS_BIGENDIAN
  narrow32Int# i
  where
   !i    = word2Int# ((b3 `uncheckedShiftL#` 24#) `or#`
		     (b2 `uncheckedShiftL#` 16#) `or#`
		     (b1 `uncheckedShiftL#` 8#) `or#` b0)
   !b3   = int2Word# (ord# (indexCharOffAddr# arr (off' +# 3#)))
   !b2   = int2Word# (ord# (indexCharOffAddr# arr (off' +# 2#)))
   !b1   = int2Word# (ord# (indexCharOffAddr# arr (off' +# 1#)))
   !b0   = int2Word# (ord# (indexCharOffAddr# arr off'))
   !off' = off *# 4#
#else
  indexInt32OffAddr# arr off
#endif





#if __GLASGOW_HASKELL__ < 503
quickIndex arr i = arr ! i
#else
-- GHC >= 503, unsafeAt is available from Data.Array.Base.
quickIndex = unsafeAt
#endif




-- -----------------------------------------------------------------------------
-- Main lexing routines

data AlexReturn a
  = AlexEOF
  | AlexError  !AlexInput
  | AlexSkip   !AlexInput !Int
  | AlexToken  !AlexInput !Int a

-- alexScan :: AlexInput -> StartCode -> AlexReturn a
alexScan input (I# (sc))
  = alexScanUser undefined input (I# (sc))

alexScanUser user input (I# (sc))
  = case alex_scan_tkn user input 0# input sc AlexNone of
	(AlexNone, input') ->
		case alexGetByte input of
			Nothing -> 



				   AlexEOF
			Just _ ->



				   AlexError input'

	(AlexLastSkip input'' len, _) ->



		AlexSkip input'' len

	(AlexLastAcc k input''' len, _) ->



		AlexToken input''' len k


-- Push the input through the DFA, remembering the most recent accepting
-- state it encountered.

alex_scan_tkn user orig_input len input s last_acc =
  input `seq` -- strict in the input
  let 
	new_acc = (check_accs (alex_accept `quickIndex` (I# (s))))
  in
  new_acc `seq`
  case alexGetByte input of
     Nothing -> (new_acc, input)
     Just (c, new_input) -> 



	let
		(!(base)) = alexIndexInt32OffAddr alex_base s
		(!((I# (ord_c)))) = fromIntegral c
		(!(offset)) = (base +# ord_c)
		(!(check))  = alexIndexInt16OffAddr alex_check offset
		
		(!(new_s)) = if (offset >=# 0#) && (check ==# ord_c)
			  then alexIndexInt16OffAddr alex_table offset
			  else alexIndexInt16OffAddr alex_deflt s
	in
	case new_s of 
	    -1# -> (new_acc, input)
		-- on an error, we want to keep the input *before* the
		-- character that failed, not after.
    	    _ -> alex_scan_tkn user orig_input (if c < 0x80 || c >= 0xC0 then (len +# 1#) else len)
                                                -- note that the length is increased ONLY if this is the 1st byte in a char encoding)
			new_input new_s new_acc

  where
	check_accs [] = last_acc
	check_accs (AlexAcc a : _) = AlexLastAcc a input (I# (len))
	check_accs (AlexAccSkip : _)  = AlexLastSkip  input (I# (len))
	check_accs (AlexAccPred a predx : rest)
	   | predx user orig_input (I# (len)) input
	   = AlexLastAcc a input (I# (len))
	check_accs (AlexAccSkipPred predx : rest)
	   | predx user orig_input (I# (len)) input
	   = AlexLastSkip input (I# (len))
	check_accs (_ : rest) = check_accs rest

data AlexLastAcc a
  = AlexNone
  | AlexLastAcc a !AlexInput !Int
  | AlexLastSkip  !AlexInput !Int

instance Functor AlexLastAcc where
    fmap f AlexNone = AlexNone
    fmap f (AlexLastAcc x y z) = AlexLastAcc (f x) y z
    fmap f (AlexLastSkip x y) = AlexLastSkip x y

data AlexAcc a user
  = AlexAcc a
  | AlexAccSkip
  | AlexAccPred a (AlexAccPred user)
  | AlexAccSkipPred (AlexAccPred user)

type AlexAccPred user = user -> AlexInput -> Int -> AlexInput -> Bool

-- -----------------------------------------------------------------------------
-- Predicates on a rule

alexAndPred p1 p2 user in1 len in2
  = p1 user in1 len in2 && p2 user in1 len in2

--alexPrevCharIsPred :: Char -> AlexAccPred _ 
alexPrevCharIs c _ input _ _ = c == alexInputPrevChar input

alexPrevCharMatches f _ input _ _ = f (alexInputPrevChar input)

--alexPrevCharIsOneOfPred :: Array Char Bool -> AlexAccPred _ 
alexPrevCharIsOneOf arr _ input _ _ = arr ! alexInputPrevChar input

--alexRightContext :: Int -> AlexAccPred _
alexRightContext (I# (sc)) user _ _ input = 
     case alex_scan_tkn user input 0# input sc AlexNone of
	  (AlexNone, _) -> False
	  _ -> True
	-- TODO: there's no need to find the longest
	-- match when checking the right context, just
	-- the first match will do.

-- used by wrappers
iUnbox (I# (i)) = i
